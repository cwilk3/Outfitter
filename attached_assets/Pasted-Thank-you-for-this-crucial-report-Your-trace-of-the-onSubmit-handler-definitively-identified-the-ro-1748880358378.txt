Thank you for this crucial report. Your trace of the onSubmit handler definitively identified the root cause: it's bypassing our enhanced mutation hooks.

Your primary task is to completely refactor the onSubmit handler in client/src/pages/Experiences.tsx to correctly use createMutation.mutate() for creating experiences and updateMutation.mutate() for updating experiences, ensuring that all necessary data (including assignedGuideIds) is passed via the mutations.

Specific Focus Areas for Modification:

File: client/src/pages/Experiences.tsx
Location: The const onSubmit = async (data: ExperienceFormValues) => { ... } function definition.
Proposed Code Changes:

1. Rewrite the entire onSubmit handler:
This will be a complete replacement of the onSubmit function's body. The current onSubmit has Path A - Update Experience and Path B - Create Experience. You need to ensure the logic for determining isCreating or isEditing is preserved to correctly call the appropriate mutation.

Find this block (the entire onSubmit function definition):

TypeScript

// Current code (lines 868-1290 approximate)
const onSubmit = async (data: ExperienceFormValues) => {
  // ... existing logging ...
  if (selectedExperience) { // Path A - Update Experience
    // ... direct apiRequest('PATCH', ...) logic ...
    // ... manual guide assignment loop ...
  } else { // Path B - Create Experience
    // ... direct fetch logic ...
    // ... manual guide assignment loop ...
  }
  // ... rest of onSubmit ...
};
Replace it with (rewritten onSubmit using createMutation.mutate() and updateMutation.mutate()):

TypeScript

const onSubmit = async (data: ExperienceFormValues) => {
  console.log('--- DIAGNOSTIC: onSubmit Handler Called ---');
  console.log('🔍 [ONSUBMIT_DEBUG] Form Data received by onSubmit:', JSON.stringify(data, null, 2));

  // Determine if creating or updating
  const isCreating = !selectedExperience; // Assuming selectedExperience determines create vs. update
  const experienceId = selectedExperience?.id; // Get ID for updates

  if (isCreating) {
    console.log('🔍 [ONSUBMIT_DEBUG] Mode: Creating new experience.');
    // Call createMutation to handle creation with multi-guide payload
    createMutation.mutate(data); // Pass full form data, mutationFn will transform to payload
  } else if (experienceId) { // Ensure experienceId exists for update
    console.log('🔍 [ONSUBMIT_DEBUG] Mode: Updating existing experience. ID:', experienceId);
    // Call updateMutation to handle update with multi-guide payload
    updateMutation.mutate({ id: experienceId, data }); // Pass ID and full form data
  } else {
    console.error('❌ [ONSUBMIT_ERROR] Invalid state: Not creating and no experienceId for update.');
    toast({ title: 'Error', description: 'Invalid form submission state.', variant: 'destructive' });
  }

  // Close the dialog after successful submission (onSuccess handlers will trigger this now)
  // setBookingConfirmation(response); // This line likely belongs in onSuccess of mutations now
  // setIsCreating(false); // This line likely belongs in onSuccess of mutations now
};
2. Ensure assignedGuideIds is Managed by react-hook-form:
Since createMutation.mutate(data) and updateMutation.mutate({ id, data }) will now pass the entire form data object, ensure that the assignedGuideIds array is properly registered with react-hook-form. This means:
Remove any direct onChange calls that were explicitly updating assignedGuideIds state from experience-guides.tsx to its parent (Experiences.tsx). Instead, experience-guides.tsx should primarily update its internal draftGuides state, and the main form submission (via form.handleSubmit(onSubmit)) will read the latest draftGuides via form.getValues().assignedGuideIds.

In client/src/components/ui/experience-guides.tsx:

Locate the onChange prop: onChange={(guides) => { if (!selectedExperience?.id) { setDraftGuides(guides); } }}
This onChange should now primarily update form.setValue('assignedGuideIds', guides) in the parent. The current implementation already has onChange(updatedDraftGuides). So this onChange should be fine if the parent Experiences.tsx correctly connects it to form.setValue.
3. Review createMutation and updateMutation onSuccess handlers:
Ensure their onSuccess handlers in client/src/pages/Experiences.tsx (not experience-guides.tsx's mutations) still correctly close the dialog and provide toasts. The dialog visibility is usually tied to isCreating state.
setIsCreating(false); and setBookingConfirmation(...) should be moved to the onSuccess of createMutation and updateMutation in Experiences.tsx.
Output Required for My Review:
Once you have implemented this rewrite, please provide a comprehensive diff preview for client/src/pages/Experiences.tsx. This will be a large diff.

Success Criteria for My Approval (for this critical fix):

The entire onSubmit handler in client/src/pages/Experiences.tsx is refactored to use createMutation.mutate() (for new experiences) and updateMutation.mutate() (for existing experiences).
The assignedGuideIds array is correctly included in the payloads passed to these mutations.
The redundant manual for...of loop for guide processing is completely removed.
Dialog closing and success toasts are managed by the onSuccess handlers of createMutation/updateMutation in Experiences.tsx.
Appropriate diagnostic logs are added to onSubmit.
No other unrelated functional code is affected.
I will not approve further steps until these critical issues are resolved. This will correctly enable multi-guide creation and updates!