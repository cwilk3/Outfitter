Thank you for detecting this critical failure in outfitterId validation. The GET /api/public/invalid/locations returning 200 is a severe security vulnerability.

Your primary task is to implement highly targeted diagnostic logging within the public route handlers in server/routes/public.ts to debug why the isNaN(outfitterId) check is not preventing invalid outfitterId values.

This logging needs to be added to the handlers for GET /api/public/:outfitterId/locations, GET /api/public/:outfitterId/experiences, and GET /api/public/:outfitterId/bookings.

Specific Focus Areas for Modification (within each handler):

File: server/routes/public.ts
Location: Inside each route handler, immediately after const outfitterId = parseInt(req.params.outfitterId as string);.
Proposed Code Changes (applying to all three routes: locations, experiences, bookings):

Example for GET /api/public/:outfitterId/locations handler:

Find this block (or similar, after outfitterId extraction):

TypeScript

router.get('/:outfitterId/locations', asyncHandler(async (req: Request, res: Response) => {
  const outfitterId = parseInt(req.params.outfitterId as string);
  
  // --- ADDED VALIDATION ---
  if (isNaN(outfitterId)) {
    return res.status(400).json({ error: 'Invalid Outfitter ID format.' });
  }
  // --- END ADDED VALIDATION ---

  // Get all active locations for public display, filtered by outfitterId
  const locations = await storage.listLocations(true, outfitterId);
  res.json(locations);
}));
Replace it with (adding diagnostic logs):

TypeScript

router.get('/:outfitterId/locations', asyncHandler(async (req: Request, res: Response) => {
  // --- START NEW DIAGNOSTIC LOGGING FOR INVALID ID ---
  console.log('[DEBUG_INVALID_ID] Route Hit: /public/:outfitterId/locations');
  console.log('[DEBUG_INVALID_ID] req.params.outfitterId RAW:', req.params.outfitterId);
  const outfitterId = parseInt(req.params.outfitterId as string);
  console.log('[DEBUG_INVALID_ID] outfitterId after parseInt:', outfitterId);
  console.log('[DEBUG_INVALID_ID] isNaN(outfitterId) result:', isNaN(outfitterId));
  // --- END NEW DIAGNOSTIC LOGGING FOR INVALID ID ---

  // --- ADDED VALIDATION ---
  if (isNaN(outfitterId)) {
    console.log('[DEBUG_INVALID_ID] Validation FAILED: Returning 400.'); // Log if validation fires
    return res.status(400).json({ error: 'Invalid Outfitter ID format.' });
  }
  // --- END ADDED VALIDATION ---

  // Get all active locations for public display, filtered by outfitterId
  console.log('[DEBUG_INVALID_ID] Validation PASSED. Proceeding to storage.listLocations with outfitterId:', outfitterId); // Log if validation passes
  const locations = await storage.listLocations(true, outfitterId);
  res.json(locations);
}));
Apply this identical diagnostic logging pattern to the handlers for GET /api/public/:outfitterId/experiences and GET /api/public/:outfitterId/bookings within server/routes/public.ts.

Output Required for My Review:
Once you have implemented these modifications, please provide a comprehensive diff preview for server/routes/public.ts. After approval, you will perform a test with a malformed ID (e.g., /api/public/invalid/locations) and provide the console output.

Success Criteria for My Approval (for this diagnostic phase):

The new [DEBUG_INVALID_ID] logs are correctly inserted into all three public route handlers at the specified locations.
The logs correctly print req.params.outfitterId (RAW), outfitterId after parseInt, and the result of isNaN(outfitterId).
Additional logs indicate if the validation if block is entered or bypassed.
No other unrelated functional code lines are affected.
The purpose is solely diagnostic; no functional fix is expected from this specific diff.
I will not approve this step until these criteria are met. This logging is crucial to understand why the validation is failing. "