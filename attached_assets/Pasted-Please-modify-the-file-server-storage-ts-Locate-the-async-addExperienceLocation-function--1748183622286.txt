Please modify the file `server/storage.ts`.

Locate the `async addExperienceLocation(...)` function. You need to **replace its entire content with the following revised implementation**. This new implementation will:
1.  Accept `outfitterIdFromAuth` as a new parameter.
2.  Fetch the experience to check its current `outfitterId`.
3.  **Crucially, if the `experience.outfitterId` is `NULL` or `undefined`, it will assign `outfitterIdFromAuth` to it.**
4.  Perform a tenant check to ensure the user is authorized to update the experience.
5.  Perform the database update, ensuring the `outfitterId` is correctly set.

**Replace the entire `async addExperienceLocation(...)` function in `server/storage.ts` with this code:**

```typescript
// In server/storage.ts (within DatabaseStorage class)
async addExperienceLocation(
  experienceLocation: InsertExperienceLocation,
  outfitterIdFromAuth: number // New parameter: Pass the outfitterId directly from auth
): Promise<{ id: number, experienceId: number, locationId: number, createdAt?: Date | null } | undefined> { // Changed return type to allow undefined
  console.log(`üìç addExperienceLocation called with: Experience ID ${experienceLocation.experienceId}, Location ID ${experienceLocation.locationId}, Outfitter ID from Auth: ${outfitterIdFromAuth}`);

  // Step 1: Fetch the experience to check its current outfitterId
  // Ensure you are using 'experiences' table defined from @shared/schema correctly
  const experience = await db.select().from(experiences).where(eq(experiences.id, experienceLocation.experienceId)).limit(1);
  const currentExperience = experience[0];

  if (!currentExperience) {
    console.error(`üìç ERROR: Experience ${experienceLocation.experienceId} not found in addExperienceLocation`);
    return undefined; // Experience not found
  }

  // Step 2: Tenant isolation and outfitterId assignment logic
  // If the experience has no outfitterId OR it belongs to a different outfitter,
  // we must ensure it's being updated by its rightful owner.
  // CRITICAL: If currentExperience.outfitterId is NULL, we set it to outfitterIdFromAuth
  if (currentExperience.outfitterId === null || currentExperience.outfitterId === undefined) {
    console.log(`üìç Experience ${currentExperience.id} has NULL outfitterId. Assigning ${outfitterIdFromAuth}.`);
    // This is the crucial part: set the outfitterId for newly created experiences
    currentExperience.outfitterId = outfitterIdFromAuth;
  } else if (currentExperience.outfitterId !== outfitterIdFromAuth) {
    // If the experience already has an outfitterId and it doesn't match the current user's outfitterId, block the operation.
    console.warn(`[TENANT-BLOCK] Unauthorized attempt to update experience ${experienceLocation.experienceId}. User outfitterId: ${outfitterIdFromAuth}, Experience outfitterId: ${currentExperience.outfitterId}`);
    return undefined; // Not authorized to update this experience
  }

  // Step 3: Proceed with update only if tenant check passes (or was just assigned)
  const [updatedExperience] = await db
    .update(experiences)
    .set({
      locationId: experienceLocation.locationId,
      outfitterId: currentExperience.outfitterId, // Use the (potentially newly assigned) outfitterId
      updatedAt: new Date()
    })
    .where(eq(experiences.id, experienceLocation.experienceId))
    .returning();

  if (!updatedExperience) {
    console.error(`üìç ERROR: Failed to update experience ${experienceLocation.experienceId} with location and outfitterId`);
    return undefined;
  }

  console.log(`üìç Successfully updated experience ${updatedExperience.id} with locationId ${updatedExperience.locationId} and outfitterId ${updatedExperience.outfitterId}`);

  // Return in the format expected by the existing code
  return {
    id: updatedExperience.id,
    experienceId: updatedExperience.id,
    locationId: updatedExperience.locationId as number,
    createdAt: updatedExperience.createdAt
  };
}