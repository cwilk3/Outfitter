Thank you for this crucial report. The frontend's experience creation flow has severe architectural flaws that need immediate correction.

Your primary task is to completely rewrite the createMutation in client/src/pages/Experiences.tsx to:

Correctly use apiRequest for authentication.
Include the assignedGuideIds array in its payload, ensuring the multi-guide creation logic in server/storage.ts is finally executed.
Remove the inefficient and problematic manual for...of loop that processes guides after experience creation.
Specific Focus Areas for Modification:

File: client/src/pages/Experiences.tsx
Locations:
The createMutation definition.
The for (const guide of draftGuides) loop (Lines 1244-1285 approximate) that processes guides after creation.
Proposed Code Changes:

1. Rewrite createMutation Definition (Use apiRequest & Include assignedGuideIds):
Find this block (the createMutation definition):

TypeScript

// Current code (lines 272-321 approximate)
const createMutation = useMutation({
  mutationFn: (data: ExperienceFormValues) => {
    // Create a payload using the provided locationId value
    const payload = {
      name: data.name,
      description: data.description,
      duration: data.duration,
      price: data.price,
      capacity: data.capacity,
      category: data.category,
      locationId: data.locationId, // Use data.locationId directly (no fallback)
      rules: rules,
      amenities: amenities,
      tripIncludes: tripIncludes,
      images: data.images,
      availableDates: data.availableDates
      // assignedGuideIds: MISSING HERE
    };
    
    // Log the exact payload being sent with emphasized locationId
    console.log("Creating experience with payload:", payload);
    console.log("  ‚Ü≥ Using locationId:", payload.locationId);
    
    return apiRequest<Experience>('POST', '/api/experiences', payload); // Uses apiRequest, but payload is wrong
  },
  // ... onSuccess handler continues
Replace it with (ensure apiRequest is imported, and assignedGuideIds is included in payload):

TypeScript

import { apiRequest } from '@/lib/queryClient'; // Ensure this is imported at the top

const createMutation = useMutation({
  mutationFn: (data: ExperienceFormValues) => {
    const payload = {
      name: data.name,
      description: data.description,
      duration: data.duration,
      price: data.price,
      capacity: data.capacity,
      category: data.category,
      locationId: data.locationId,
      rules: data.rules, // Ensure all fields from data are passed
      amenities: data.amenities,
      tripIncludes: data.tripIncludes,
      images: data.images,
      availableDates: data.availableDates,
      assignedGuideIds: draftGuides.map(guide => ({ // <--- CRITICAL: INCLUDE DRAFT GUIDES
        guideId: guide.guideId,
        isPrimary: guide.isPrimary
      }))
    };
    
    console.log("üîç [CREATE_MUTATION_DEBUG] Creating experience with payload:", payload); // New diagnostic log
    return apiRequest<Experience>('POST', '/api/experiences', payload);
  },
  // ... onSuccess handler continues (keep existing logic)
2. Remove Redundant Guide Processing Loop (Lines 1244-1285 approximate):
Find this entire block:

TypeScript

// Current code (lines 1244-1285 approximate)
// Process draft guides if any exist
if (draftGuides.length > 0 && result) { // 'result' is created experience from createMutation
  const experienceId = result.id;
  console.log(`Processing ${draftGuides.length} draft guides for new experience ID ${experienceId}`);
  
  // Create each guide assignment
  for (const guide of draftGuides) {
    try {
      console.log(`Assigning guide ${guide.guideId} to experience ${experienceId}, isPrimary: ${guide.isPrimary}`);
      
      // Direct fetch for better error visibility (THIS IS THE PROBLEMATIC LOOP)
      const response = await fetch(`/api/experiences/${experienceId}/guides`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          guideId: guide.guideId,
          isPrimary: guide.isPrimary
        })
      });
      // ... error handling for fetch ...
    } catch (guideError) {
      console.error(`Error processing guide ${guide.guideId}:`, guideError);
    }
  }
}
Replace it with (empty block or comment):

TypeScript

// --- REMOVED: Redundant and problematic direct fetch loop for guide processing ---
// Multi-guide assignment is now handled directly within the createMutation payload.
Output Required for My Review:
Once you have implemented these modifications, please provide a comprehensive diff preview for client/src/pages/Experiences.tsx.

Success Criteria for My Approval (for this critical fix):

The createMutation's mutationFn is updated to correctly include assignedGuideIds in its payload.
The createMutation's mutationFn explicitly uses apiRequest for its network call (ensuring authentication).
The redundant and problematic for (const guide of draftGuides) loop (Lines 1244-1285) is completely removed.
A diagnostic log üîç [CREATE_MUTATION_DEBUG] is added to confirm payload content.
No other unrelated functional code is affected.
I will not approve further steps until these critical issues are resolved. This will correctly enable multi-guide creation!