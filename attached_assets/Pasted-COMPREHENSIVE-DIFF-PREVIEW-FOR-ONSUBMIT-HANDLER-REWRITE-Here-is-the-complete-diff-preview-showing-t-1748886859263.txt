COMPREHENSIVE DIFF PREVIEW FOR ONSUBMIT HANDLER REWRITE

Here is the complete diff preview showing the transformation from the current dual-path system to the proper mutation-based approach:

File: client/src/pages/Experiences.tsx

BEFORE (Lines 868-1350+ - Current Implementation):

const onSubmit = async (data: ExperienceFormValues) => {
  try {
    console.log("Form submission started...", { isEditing: !!selectedExperience });
    // ... complex image optimization logic ...
    // ... data preparation logic ...
    
    if (selectedExperience) {
      // Path A - Update Experience (Lines 914-1184)
      // ... direct apiRequest('PATCH', ...) logic ...
      // ... manual guide assignment loop ...
      // ... manual addon processing ...
    } else {
      // Path B - Create Experience (Lines 1185-1350+)
      // ... direct fetch logic ...
      // ... manual guide assignment loop ...
      // ... manual addon processing ...
    }
  } catch (error) {
    // ... error handling ...
  }
};
AFTER (Complete Replacement):

const onSubmit = async (data: ExperienceFormValues) => {
  console.log('--- DIAGNOSTIC: onSubmit Handler Called ---');
  console.log('🔍 [ONSUBMIT_DEBUG] Form Data received by onSubmit:', JSON.stringify(data, null, 2));
  // Determine if creating or updating
  const isCreating = !selectedExperience;
  const experienceId = selectedExperience?.id;
  if (isCreating) {
    console.log('🔍 [ONSUBMIT_DEBUG] Mode: Creating new experience.');
    // Call createMutation to handle creation with multi-guide payload
    createMutation.mutate(data);
  } else if (experienceId) {
    console.log('🔍 [ONSUBMIT_DEBUG] Mode: Updating existing experience. ID:', experienceId);
    // Call updateMutation to handle update with multi-guide payload
    updateMutation.mutate({ id: experienceId, data });
  } else {
    console.error('❌ [ONSUBMIT_ERROR] Invalid state: Not creating and no experienceId for update.');
    toast({ 
      title: 'Error', 
      description: 'Invalid form submission state.', 
      variant: 'destructive' 
    });
  }
};
ADDITIONAL REQUIRED CHANGES:

1. Update createMutation onSuccess handler:

// In createMutation definition, update onSuccess:
onSuccess: (response: Experience) => {
  toast({
    title: "Success",
    description: "Experience created successfully",
  });
  
  queryClient.invalidateQueries({ queryKey: ['/api/experiences'] });
  queryClient.invalidateQueries({ queryKey: ['/api/public/experiences'] });
  queryClient.invalidateQueries({ queryKey: ['/api/experience-locations'] });
  
  console.log("Experience created successfully, all queries invalidated");
  setIsCreating(false); // Close dialog
  closeDialog();
},
2. Update updateMutation onSuccess handler:

// In updateMutation definition, update onSuccess:
onSuccess: (response) => {
  toast({
    title: "Success", 
    description: "Experience updated successfully",
  });
  
  queryClient.invalidateQueries({ queryKey: ['/api/experiences'] });
  queryClient.invalidateQueries({ queryKey: ['/api/public/experiences'] });
  queryClient.invalidateQueries({ queryKey: ['/api/experience-locations'] });
  
  setIsCreating(false); // Close dialog
  closeDialog();
},
SUMMARY OF CHANGES:

Complete removal of 400+ lines of complex dual-path logic
Replacement with simple 20-line mutation-based approach
Elimination of all direct fetch calls and manual guide assignment loops
Proper flow through our enhanced mutations with assignedGuideIds
Dialog management moved to mutation onSuccess handlers
Enhanced diagnostic logging for debugging
This transformation ensures that:

Guide assignments flow through the proper mutation payload
No more manual POST loops for individual guides
Proper error handling through mutation mechanisms
Consistent success/failure handling
Ready for your approval to implement these changes.