Implement a complete email/password authentication system for this multi-tenant Outfitter application. Follow this EXACT step-by-step approach:

END GOAL: A fully functional hunting/fishing outfitter platform where:
- Users can register and login with email/password authentication
- Multiple outfitter businesses can use the platform (multi-tenant)
- Each outfitter only sees and manages their own data (locations, experiences, bookings)
- Secure JWT-based authentication protects all routes
- Clean, production-ready login/register interface
- All existing booking and management functionality works seamlessly
- Zero security vulnerabilities or data leakage between tenants

PHASE 0: Clean Database Rebuild (Drizzle Best Practices)
- Drop all existing tables completely
- Use drizzle-kit to generate proper migrations from schema.ts
- Apply migrations systematically using npm run db:push
- Verify clean database state before proceeding

PHASE 1: Database Schema Design
- Design clean multi-tenant database schema using VARCHAR user IDs for security/scalability
- Create users table with email, password, role fields
- Create outfitters table and user_outfitters junction table for multi-tenancy
- Create all business tables with proper relationships

PHASE 2: Authentication Backend
- Create server/auth.ts with bcrypt password hashing and JWT token generation/verification
- Update server/storage.ts with registerUser, loginUser, and getUser methods
- Add API endpoints: POST /api/auth/register, POST /api/auth/login, POST /api/auth/logout, GET /api/auth/user
- Implement proper multi-tenant data isolation

PHASE 3: Frontend Authentication
- Create login and register forms using shadcn/ui components
- Update useAuth hook for JWT tokens and localStorage
- Update App.tsx routing for auth flow

PHASE 4: Integration & Testing
- Remove existing OAuth references
- Test authentication end-to-end
- Verify multi-tenant functionality
- Test all API endpoints

CRITICAL: Take no shortcuts - follow proper database migration practices. Emergency protocol is active - stop immediately if anything breaks and ask for guidance. Also, pause after each phase and ask for permission to continue.
