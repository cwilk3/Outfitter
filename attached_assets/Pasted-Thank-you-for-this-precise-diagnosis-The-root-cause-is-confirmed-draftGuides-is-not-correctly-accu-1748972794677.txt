Thank you for this precise diagnosis. The root cause is confirmed: draftGuides is not correctly accumulating both initial and newly added guides, leading to data overwrite on form submission.

Your primary task is to modify the ExperienceGuides component in client/src/src/components/ui/experience-guides.tsx to ensure draftGuides is correctly initialized with externalAssignedGuides (the existing guides fetched from the backend) when editing an existing experience.

Specific Focus Areas for Modification:

File: client/src/components/ui/experience-guides.tsx
Location: The useEffect hook that initializes draftGuides (likely after state declarations, around lines 96-120 from previous context).
Proposed Code Changes:

Find this block (the useEffect that initializes draftGuides):

TypeScript

  // Initialize draftGuides from initialDraftGuides or externalAssignedGuides only once
  useEffect(() => {
    console.log('--- DIAGNOSTIC: draftGuides useEffect Init ---'); // Keep existing log
    console.log('üîç [DRAFT_GUIDES_DEBUG] useEffect dependencies:', { draftMode, initialDraftGuidesLength: initialDraftGuides.length, externalAssignedGuidesLength: externalAssignedGuides.length }); // Keep existing log
    
    if (draftMode && initialDraftGuides.length > 0) {
      setDraftGuides(initialDraftGuides);
      setNextTempId(Math.max(...initialDraftGuides.map(g => g.tempId || 0)) + 1);
      console.log('üîç [DRAFT_GUIDES_DEBUG] Initializing draftGuides from initialDraftGuides (creation mode). Result:', initialDraftGuides);
    } else if (!draftMode && externalAssignedGuides.length > 0) { // For editing, populate draftGuides from externally assigned
      const mappedGuides = externalAssignedGuides.map((guide, index) => ({
        ...guide,
        tempId: guide.id, // Use existing ID as tempId for edits
      }));
      setDraftGuides(mappedGuides);
      setNextTempId(Math.max(...mappedGuides.map(g => g.tempId || 0)) + 1);
      console.log('üîç [DRAFT_GUIDES_DEBUG] Initializing draftGuides from externalAssignedGuides (edit mode). Result:', mappedGuides);
    } else if (!draftMode && externalAssignedGuides.length === 0 && assignedGuides.length > 0) { // Edge case: no external, but assigned (e.g. initial fetch not done yet)
        console.warn('‚ö†Ô∏è [DRAFT_GUIDES_DEBUG] useEffect - externalAssignedGuides is empty, but assignedGuides has data. Potential sync issue.');
    }
    console.log('üîç [DRAFT_GUIDES_DEBUG] useEffect finished. Current draftGuides state:', JSON.stringify(draftGuides, null, 2));
  }, [draftMode, initialDraftGuides, externalAssignedGuides, setDraftGuides, setNextTempId, assignedGuides]); // Current dependencies
Replace it with (modifying the useEffect to ensure draftGuides always reflects externalAssignedGuides or initialDraftGuides on first render or when props change):

TypeScript

  // Initialize draftGuides from initialDraftGuides or externalAssignedGuides
  useEffect(() => {
    console.log('--- DIAGNOSTIC: draftGuides useEffect Init ---');
    console.log('üîç [DRAFT_GUIDES_DEBUG] useEffect dependencies:', { draftMode, initialDraftGuidesLength: initialDraftGuides.length, externalAssignedGuidesLength: externalAssignedGuides.length });
    
    // Determine the source of truth for initial draftGuides based on mode
    let sourceGuides: DraftGuideAssignment[] = [];
    if (draftMode) {
      // For new experiences (creation), use initialDraftGuides (which usually starts empty or from parent's initial state)
      sourceGuides = initialDraftGuides;
      console.log('üîç [DRAFT_GUIDES_DEBUG] Initializing from initialDraftGuides (creation mode).');
    } else {
      // For existing experiences (edit mode), use externalAssignedGuides (from API)
      // Map them to DraftGuideAssignment to ensure tempId and mutability
      sourceGuides = (externalAssignedGuides || []).map(guide => ({
        ...guide,
        tempId: guide.id, // Use existing ID as tempId for edits
        isPrimary: guide.isPrimary || false // Ensure isPrimary is boolean
      }));
      console.log('üîç [DRAFT_GUIDES_DEBUG] Initializing from externalAssignedGuides (edit mode).');
    }

    setDraftGuides(sourceGuides);
    setNextTempId(Math.max(...sourceGuides.map(g => g.tempId || 0)) + 1); // Set tempId counter based on source guides
    
    console.log('üîç [DRAFT_GUIDES_DEBUG] useEffect finished. Final draftGuides state:', JSON.stringify(sourceGuides, null, 2));
  }, [draftMode, initialDraftGuides, externalAssignedGuides]); // Simplify dependencies, `setDraftGuides` and `setNextTempId` are stable.
Output Required for My Review:
Once you have implemented this modification, please provide a comprehensive diff preview for client/src/components/ui/experience-guides.tsx.

Success Criteria for My Approval (for this functional fix):

The useEffect hook that initializes draftGuides is modified to:
Use a single, unified logic path to determine sourceGuides based on draftMode.
Correctly map externalAssignedGuides to DraftGuideAssignment format (including tempId: guide.id and isPrimary boolean).
Call setDraftGuides(sourceGuides) and setNextTempId correctly.
Diagnostic logs are correctly updated to reflect this new initialization logic.
No other unrelated functional code is affected.
The change directly resolves draftGuides not accumulating existing guides, fixing the guide replacement issue.
I will not approve this step until these criteria are met. This fix is crucial for solving the guide replacement issue!