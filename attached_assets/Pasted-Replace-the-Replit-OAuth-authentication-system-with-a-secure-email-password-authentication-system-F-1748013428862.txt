Replace the Replit OAuth authentication system with a secure email/password authentication system. Follow this exact approach:

EMERGENCY PROTOCOL:

If ANY step breaks existing functionality, STOP immediately and request guidance
If database operations fail, HALT and report the specific error
If authentication breaks, PAUSE and ask for permission to continue
Test each phase before proceeding to the next one
If TypeScript errors exceed 5, STOP and resolve them first
Do NOT proceed if any business logic (bookings, experiences, customers) stops working
Phase 1: Clean removal

Remove all Replit OAuth code from server/replitAuth.ts
Remove OAuth-related routes from server/routes.ts
Remove passport and OpenID dependencies
Keep the sessions table for JWT token storage
Phase 2: Database schema updates

Add password field to users table (hashed)
Remove OAuth-specific fields from users schema
Update user types and validation schemas
Generate and apply database migration
Phase 3: Backend authentication

Install bcrypt for password hashing
Create secure JWT-based authentication middleware
Implement /api/auth/register endpoint with password hashing
Implement /api/auth/login endpoint with JWT token generation
Update /api/auth/user endpoint to validate JWT tokens
Add /api/auth/logout endpoint
Phase 4: Frontend updates

Update useAuth hook to handle JWT tokens
Create login/register forms to replace OAuth button
Update landing page with email/password forms
Store JWT tokens securely in localStorage
Phase 5: Integration testing

Test complete registration flow
Test login/logout functionality
Verify protected routes work with JWT authentication
Confirm multi-tenant data isolation still works
Requirements:

Use industry-standard password hashing (bcrypt)
Generate secure JWT tokens with expiration
Maintain all existing business functionality
Keep the clean database architecture we built
No breaking changes to existing API endpoints
Professional UI for login/register forms
End result: A fully functional email/password authentication system replacing the broken OAuth implementation.