COMPREHENSIVE REFACTORING PLAN: MULTI-TENANT SECURITY & TECHNICAL DEBT RESOLUTION
PHASE 1: CRITICAL SECURITY FIXES (Week 1)
1.1 Tenant Validation Standardization
Create withTenantValidation() middleware decorator
Implement getTenantResource(id, outfitterId) pattern for all single-record lookups
Add tenant validation to: getCustomer, getLocation, getExperience, getBooking
Replace direct ID lookups with tenant-scoped queries
1.2 Dashboard & Settings Tenant Isolation
Refactor getDashboardStats() to accept outfitterId parameter
Implement tenant-scoped settings storage with outfitterId foreign key
Create getSettingsByOutfitter() and updateSettingsByOutfitter() methods
Add settings migration to scope existing data to primary outfitter
1.3 Cross-Tenant Access Prevention
Audit all storage methods for missing tenant parameters
Implement automatic outfitter context injection at database layer
Add assertTenantAccess() validation before all CUD operations
Create tenant isolation integration tests
PHASE 2: ROUTE ARCHITECTURE CLEANUP (Week 2)
2.1 Eliminate Priority Route Overrides
Remove all manual route registrations from main routes.ts
Consolidate duplicate handlers into single modular routes
Fix Vite conflict resolution at build level, not runtime
Establish consistent route registration order
2.2 Middleware Standardization
Replace manual authentication checks with consistent middleware chain
Create requireTenantAuth() combining authentication + tenant context
Implement role-based middleware: requireAdmin(), requireGuide()
Remove dynamic imports and promise wrapping patterns
2.3 Error Handling Unification
Create centralized error handling middleware
Standardize HTTP status codes and error message formats
Implement proper validation error propagation
Remove scattered try-catch blocks in favor of async middleware
PHASE 3: STORAGE LAYER REFACTORING (Week 3)
3.1 Domain Service Separation
Split storage.ts into domain services: UserService, BookingService, ExperienceService
Implement dependency injection container
Create TenantAwareService base class with common tenant validation
Establish consistent method naming and parameter patterns
3.2 Database Query Optimization
Implement tenant-scoped base queries for all operations
Add database-level row security policies
Create optimized indexes for tenant-scoped queries
Implement query result caching with tenant awareness
3.3 Type Safety Improvements
Create strongly-typed tenant context interfaces
Implement compile-time tenant validation
Replace manual type coercion with proper TypeScript patterns
Add runtime type validation for critical tenant operations
PHASE 4: OBSERVABILITY & MONITORING (Week 4)
4.1 Structured Logging
Replace debug console logs with structured logging system
Implement tenant-aware log correlation
Add security event logging for cross-tenant access attempts
Create log aggregation and alerting for security events
4.2 Tenant Isolation Testing
Create comprehensive tenant isolation test suite
Implement automated cross-tenant access detection
Add performance testing for tenant-scoped queries
Establish continuous security validation pipeline
4.3 Documentation & Standards
Create tenant isolation development guidelines
Document security patterns and anti-patterns
Establish code review checklist for tenant safety
Create runbook for tenant security incident response
PHASE 5: PERFORMANCE & SCALABILITY (Week 5)
5.1 Caching Strategy
Implement tenant-aware Redis caching
Create cache invalidation patterns for tenant data
Add cache warming for frequently accessed tenant resources
Optimize cache key strategies for multi-tenant access patterns
5.2 Database Optimization
Add tenant-specific database partitioning where beneficial
Implement connection pooling with tenant awareness
Optimize indexes for tenant-scoped query patterns
Add database monitoring for tenant-specific performance
5.3 API Rate Limiting
Implement per-tenant rate limiting
Add resource quotas for tenant usage
Create tenant usage analytics and reporting
Establish fair usage policies and enforcement
IMPLEMENTATION PRIORITIES
Critical Path (Immediate)
Tenant validation for individual record lookups
Dashboard stats tenant scoping
Priority route override removal
Settings tenant isolation
High Impact (Week 1-2)
Storage layer domain separation
Middleware standardization
Error handling unification
Cross-tenant access testing
Stabilization (Week 3-5)
Performance optimization
Monitoring implementation
Documentation completion
Security audit validation
SUCCESS METRICS
Security: Zero cross-tenant data leakage in automated tests
Performance: <200ms response time for tenant-scoped queries
Maintainability: <50 lines per route handler, consistent patterns
Reliability: <1% error rate, proper error handling coverage
Code Quality: 90%+ test coverage, zero manual authentication checks
This plan addresses both immediate security concerns and long-term technical debt while maintaining system stability throughout the refactoring process.
