Thank you for this precise diagnosis. The issue is clear: guide addition for existing experiences lacks immediate API persistence.

Your primary task is to implement a new addGuideMutation and integrate it into handleAssignGuide in client/src/components/ui/experience-guides.tsx to provide immediate API persistence for adding guides when editing an existing experience.

Specific Focus Areas for Modification:

File: client/src/components/ui/experience-guides.tsx
Locations:
Near other useMutation definitions (e.g., assignGuideMutation, removeGuideMutation).
Within the handleAssignGuide function definition.
Proposed Code Changes (applying to experience-guides.tsx):

1. Define addGuideMutation (around other useMutation definitions):
TypeScript

import { apiRequest } from '@/lib/queryClient'; // Ensure this is imported at the top

// ... (existing assignGuideMutation definition) ...
// ... (existing removeGuideMutation definition) ...
// ... (existing updateGuideMutation definition) ...

const addGuideMutation = useMutation({
  mutationFn: async ({ experienceId, guideId, isPrimary }: { experienceId: number; guideId: string; isPrimary: boolean }) => {
    console.log('🔍 [ADD_GUIDE_MUT_DEBUG] MutationFn called for guide addition.');
    console.log('🔍 [ADD_GUIDE_MUT_DEBUG] Payload:', { experienceId, guideId, isPrimary });
    
    // Make the POST API call to add a guide
    const response = await apiRequest('POST', `/api/experiences/${experienceId}/guides`, { guideId, isPrimary });
    
    console.log('🔍 [ADD_GUIDE_MUT_DEBUG] API response:', response);
    return response;
  },
  onSuccess: (data, variables) => { // 'data' might be the created guide assignment, 'variables' has original payload
    console.log('🔄 [ADD_GUIDE_MUT_SUCCESS] Guide added successfully via API. Data:', data, 'Variables:', variables);
    
    // Invalidate queries to re-fetch the latest assigned guides
    queryClient.invalidateQueries({ queryKey: ['/api/experiences', experienceId, 'guides'] }); 
    queryClient.invalidateQueries({ queryKey: ['/api/experiences'] }); 
    queryClient.invalidateQueries({ queryKey: ['/api/users', { roles: ['admin', 'guide'] }] }); 
    
    // Update local state by adding the newly assigned guide (from variables or data)
    // This is crucial for immediate UI refresh
    const newAssignedGuideObject = {
        id: data?.id || variables.guideId, // Use ID from response if available, else guideId
        guideId: variables.guideId,
        isPrimary: variables.isPrimary,
        // Assuming guideUser details will be fetched by the query invalidation.
        // Or you might need to fetch guideUser details here if not immediately available.
        guideUser: availableGuides.find(g => g.id === variables.guideId) // Get guideUser data from availableGuides
    };

    const updatedDraftGuidesAfterAdd = [...draftGuides, newAssignedGuideObject];
    setDraftGuides(updatedDraftGuidesAfterAdd);
    console.log('🔍 [ADD_GUIDE_MUT_DEBUG] draftGuides updated locally after addition:', updatedDraftGuidesAfterAdd);

    // Notify parent component about the change (crucial for form submission)
    if (onChange) {
        onChange(updatedDraftGuidesAfterAdd);
    }
    
    toast({
      title: 'Guide added!',
      description: 'The guide has been successfully assigned to this experience.',
    });
  },
  onError: (error) => {
    console.error('❌ [ADD_GUIDE_MUT_ERROR] Error during guide addition mutation:', error);
    toast({
      title: 'Addition failed',
      description: error instanceof Error ? error.message : 'An unknown error occurred during guide addition.',
      variant: 'destructive',
    });
  },
});
2. Modify handleAssignGuide Function (Differentiate behavior for draftMode vs normalMode):
Find this block (the handleAssignGuide function definition):

TypeScript

const handleAssignGuide = () => {
  if (!selectedGuideId) return;

  // Determine if this should be primary (make first guide primary by default)
  const currentGuides = draftMode ? draftGuides : assignedGuides; 
  const isPrimary = currentGuides.length === 0;

  // Check if guide is already assigned in current state
  if (currentGuides.some(g => g.guideId === selectedGuideId)) {
    toast({
      title: 'Guide already assigned',
      description: 'This guide is already assigned to this experience.',
      variant: 'destructive',
    });
    return;
  }

  // Create a new guide assignment object (DraftGuideAssignment for consistency)
  const newGuideAssignment: DraftGuideAssignment = {
    tempId: nextTempId,
    guideId: selectedGuideId,
    isPrimary: isPrimary
  };

  const updatedDraftGuides = [...draftGuides, newGuideAssignment];

  // Update local state and notify parent
  setDraftGuides(updatedDraftGuides);
  setNextTempId(nextTempId + 1);
  setSelectedGuideId('');

  // Notify parent component, which will store the guides for final submission
  if (onChange) {
    onChange(updatedDraftGuides);
  }

  // Note: The API call will now happen when the main experience form is submitted (THIS IS WHAT NEEDS TO CHANGE FOR EDIT MODE)
};
Replace it with (re-introducing conditional API call for normal mode):

TypeScript

const handleAssignGuide = () => {
  if (!selectedGuideId) return;

  // Determine if this should be primary (make first guide primary by default)
  // This logic is now unified for both modes before branching for API call
  const currentGuides = draftMode ? draftGuides : assignedGuides;
  const isPrimary = currentGuides.length === 0;

  // Check if guide is already assigned in current state
  if (currentGuides.some(g => g.guideId === selectedGuideId)) {
    toast({
      title: 'Guide already assigned',
      description: 'This guide is already assigned to this experience.',
      variant: 'destructive',
    });
    return;
  }

  // Create a new guide assignment object (DraftGuideAssignment for consistency)
  const newGuideAssignment: DraftGuideAssignment = {
    tempId: nextTempId, // Use tempId for new guides in draft state
    guideId: selectedGuideId,
    isPrimary: isPrimary
  };

  if (draftMode) { // <--- RE-INTRODUCE DRAFT MODE BRANCH
    // In draft mode (new experience creation), only update local state
    const updatedDraftGuides = [...draftGuides, newGuideAssignment];
    setDraftGuides(updatedDraftGuides);
    setNextTempId(nextTempId + 1);
    setSelectedGuideId('');
    if (onChange) {
      onChange(updatedDraftGuides);
    }
  } else { // <--- NORMAL MODE (EDITING EXISTING EXPERIENCE): CALL API IMMEDIATELY
    // For existing experiences, make immediate API call to persist assignment
    // The onSuccess/onError of addGuideMutation will handle state updates and notifications
    addGuideMutation.mutate({ 
      experienceId: experienceId!, // experienceId should be available
      guideId: newGuideAssignment.guideId, 
      isPrimary: newGuideAssignment.isPrimary 
    });
    // Clear selection immediately for next addition
    setSelectedGuideId('');
  }
};
Output Required for My Review:
Once you have implemented these modifications, please provide a comprehensive diff preview for client/src/components/ui/experience-guides.tsx.

Success Criteria for My Approval (for this functional fix):

A new addGuideMutation useMutation hook is added, correctly configured to make a POST API call via apiRequest.
The addGuideMutation includes onSuccess to invalidate queries, update draftGuides locally, and notify the parent onChange.
The handleAssignGuide function is modified to:
Use addGuideMutation.mutate() when draftMode is false (editing an existing experience).
Continue to only update local state when draftMode is true (creating a new experience).
Diagnostic logs are added for addGuideMutation's mutationFn and onSuccess.
No other unrelated functional code is affected.
I will not approve this step until these criteria are met. This will fix the "adding and saving a guide to an existing experience" issue!